@page "/learn"
@using System.Net.Http.Headers
@* This allows for two way binding *@
@rendermode InteractiveServer
@* What is this attribute? *@
@attribute [StreamRendering]

<PageTitle>Learn</PageTitle>

<h1>Learn</h1>

@* One way binding *@
<h3>@garbage</h3>

@* Two way binding *@
<input @bind-value="user_message" class="form-control" />
<h3>@user_message</h3>

@* API request to NOAA *@
<button @onclick="FetchData">Get NOAA Data</button>
<ul>
    @if (isLoading)
    {
        <li>Loading...</li>
    }
    else if (errorMessage != null)
    {
        <li>Error: @errorMessage</li>
    }
    else
    {
        <p>@data[1].Term</p>
        @* @foreach (var item in data)
    {
    <li><strong>@item.Term</strong>: @item.Definition</li>
    } *@
    }
</ul>

@code {
    public HttpClient httpClient = new HttpClient();
    public List<Item> data;
    public bool isLoading = true;
    public string errorMessage;

    string garbage = "Hello from inside \"Learn\" component page";
    string user_message = "default";
    string noaa_response = "";

    public async Task FetchData()
    {
        try
        {
            httpClient.DefaultRequestHeaders.Add("User-Agent", "WebApp");
            var apiResponse = await httpClient.GetFromJsonAsync<NoaaApiResponse>("https://api.weather.gov/glossary");
            // Using ?? will prevent us in needing an if statement in rendering code to check if data contains stuff
            data = apiResponse?.Glossary ?? new List<Item>();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public class Item
    {
        public string Term { get; set; }
        public string Definition { get; set; }
    }

    public class NoaaApiResponse
    {
        public List<Item> Glossary { get; set; }
    }
}