@page "/alarm"
@using System.Net.Http.Headers
@using System.Text.Json.Serialization
@using NOAA_Track.Models
@using NOAA_Track.Database
@using System.Reflection
@inject IConfiguration Configuration
@* @inject ApiKeyService ApiService *@
@inject SatelliteContext context
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Radar Alarms</PageTitle>

<h1>Radar Alarms</h1>

@* <input @bind-value="location" class="form-control" @onkeypress="Fetch" />
<p>searching for: @location</p> *@

@if (isLoadingStations)
{
    <p><em>Loading...</em></p>
}
else if (errorMessageStations != null)
{
    <p><em>Error: @errorMessageStations</em></p>
}
else
{
    if (station_data != null)
    {
        <div id="myDiv" style="height: 200px; overflow-y: auto; border: 1px solid black">
            @foreach (var item in station_data.features)
            {
                <div style="padding: 5px;">
                    <button style="background-color: white;" @onclick="e => Fetch(item.properties.id)">@item.properties.name
                        @item.properties.id</button>
                </div>
            }
        </div>
    }
}

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <p><em>Error: @errorMessage</em></p>
}
else
{
    <iframe width="600" height="450" style="border:0" loading="lazy" allowfullscreen
        referrerpolicy="no-referrer-when-downgrade" src=@location>
    </iframe>

    if (alarm_data != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Version</th>
                    <th>Route ID</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@alarm_data.context.Version</td>
                    <td>@alarm_data.id</td>
                </tr>
            </tbody>
        </table>

        <table class="table">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Station ID</th>
                    <th>Status</th>
                    <th>Active Channel</th>
                    <th>Message</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in alarm_data.Graph)
                {
                    <tr>
                        <td>@item.type</td>
                        <td>@item.stationId</td>
                        <td>@item.status</td>
                        <td>@item.activeChannel</td>
                        <td>@item.message</td>
                        <td>@item.timestamp</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    public HttpClient httpClient = new HttpClient();
    public required AlarmApiResponse alarm_data;
    public string? MAP_KEY;
    public string? location;

    public bool isLoading = true;
    public bool isLoadingStations = true;
    public required string errorMessage;
    public required string errorMessageStations;

    @* TODO: Do you need to make sepearte http clients objects for different api calls? *@
    public HttpClient httpClientStation = new HttpClient();
    public StationApiResponse station_data;

    public HttpClient httpClientSingleStation = new HttpClient();
    public SingleStationApiResponse single_station_data;

    @* TODO: Why does the Console.Writelines print twice? *@
    protected override async Task OnInitializedAsync()
    {
        try
        {
            MAP_KEY = Configuration["NOAA:MapApiKey"];
            @* Console.WriteLine($"key from service: {ApiService.API_KEY}"); *@
            location = $"https://www.google.com/maps/embed/v1/place?key={MAP_KEY}&q=47.52805,-97.32499&zoom=6&maptype=satellite";
            httpClient.DefaultRequestHeaders.Add("User-Agent", "WebApp");
            var api_response = await
            httpClient.GetFromJsonAsync<AlarmApiResponse>("https://api.weather.gov/radar/stations/KMVX/alarms");
            alarm_data = api_response ?? new AlarmApiResponse() { id = "0.0", Graph = new List<GraphEntry>() };

            httpClientStation.DefaultRequestHeaders.Add("User-Agent", "WebApp");
            var station_response = await
            httpClientStation.GetFromJsonAsync<StationApiResponse>("https://api.weather.gov/radar/stations");
            station_data = station_response ?? new StationApiResponse();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        finally
        {
            isLoading = false;
            isLoadingStations = false;
        }
    }

    @* TODO: Add limits to the amount of items inside list *@
    @* TODO: Will all entries print out if I don't limit? *@
    @* TODO: Add timeout error if request takes too long? *@
    public async Task Fetch(string id)
    {
        Console.WriteLine("Pressed " + id + "!");
        try
        {
            httpClient.DefaultRequestHeaders.Add("User-Agent", "WebApp");
            var api_response = await
            httpClient.GetFromJsonAsync<AlarmApiResponse>("https://api.weather.gov/radar/stations/" + id + "/alarms");
            alarm_data = api_response ?? new AlarmApiResponse() { id = "0.0", Graph = new List<GraphEntry>() };

            httpClientSingleStation.DefaultRequestHeaders.Add("User-Agent", "WebApp");
            var single_station_response = await
            httpClientSingleStation.GetFromJsonAsync<SingleStationApiResponse>("https://api.weather.gov/radar/stations/" + id + "");
            single_station_data = single_station_response ?? new SingleStationApiResponse();
            double longitude = single_station_data.geometry.coordinates[0];
            double latitude = single_station_data.geometry.coordinates[1];
            location =
            $"https://www.google.com/maps/embed/v1/place?key={MAP_KEY}&q={latitude},{longitude}&zoom=6&maptype=satellite";
        }
        catch (Exception ex)
        {
            errorMessageStations = ex.Message;
        }
    }
}
